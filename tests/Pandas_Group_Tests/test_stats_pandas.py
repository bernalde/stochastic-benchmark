import pandas as pd
import pytest
from stats import Stats, StatsParameters, Median
import names

@pytest.fixture
def sample_df():
    # The Stats function expects confidence interval columns for each metric.
    # We add dummy columns for 'response_lower' and 'response_upper'.
    return pd.DataFrame({
        'instance': ['x','y','x','y'],
        'response': [1,2,3,4],
        'response_lower': [0.9, 1.9, 2.9, 3.9],
        'response_upper': [1.1, 2.1, 3.1, 4.1]
    })

@pytest.fixture
def stats_params():
    return StatsParameters(metrics=['response'], stats_measures=[Median()])

def test_stats_runs(sample_df, stats_params):
    df = sample_df.copy()
    # The Stats function expects column names to be in the format generated by names.param2filename.
    # We rename the columns to match this format.
    metric_name = names.param2filename({'Key': 'response'}, '')
    lower_name = names.param2filename({'Key': 'response', 'ConfInt': 'lower'}, '')
    upper_name = names.param2filename({'Key': 'response', 'ConfInt': 'upper'}, '')
    df.rename(columns={
        'response': metric_name,
        'response_lower': lower_name,
        'response_upper': upper_name
    }, inplace=True)
    
    df_stats = Stats(df, stats_params, group_on=['instance'])
    
    assert isinstance(df_stats, pd.DataFrame)
    # The output column names will be based on the metric name and the stat measure.
    # Note: the stat measure name is lowercased by default.
    expected_base_col = names.param2filename({'Key': 'response', 'Metric': 'median'}, '')
    expected_cols = [
        expected_base_col,
        names.param2filename({'Key': 'response', 'Metric': 'median', 'ConfInt': 'lower'}, ''),
        names.param2filename({'Key': 'response', 'Metric': 'median', 'ConfInt': 'upper'}, ''),
        'count'
    ]
    for col in expected_cols:
        assert col in df_stats.columns
    if isinstance(df_stats.index, pd.MultiIndex):
        df_stats = df_stats.reset_index()
    assert len(df_stats) == df['instance'].nunique()
